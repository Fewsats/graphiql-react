{"version":3,"file":"static/js/206.5b96fc5c.chunk.js","mappings":"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","sources":["../node_modules/@graphiql/graphql-language-service/esm/utils/Range.js","../node_modules/@graphiql/graphql-language-service/esm/utils/validateWithCustomRules.js","../node_modules/@graphiql/graphql-language-service/esm/interface/getDiagnostics.js","../node_modules/@graphiql/codemirror-graphql/esm/lint.js"],"sourcesContent":["export class Range {\n    constructor(start, end) {\n        this.containsPosition = (position) => {\n            if (this.start.line === position.line) {\n                return this.start.character <= position.character;\n            }\n            if (this.end.line === position.line) {\n                return this.end.character >= position.character;\n            }\n            return this.start.line <= position.line && this.end.line >= position.line;\n        };\n        this.start = start;\n        this.end = end;\n    }\n    setStart(line, character) {\n        this.start = new Position(line, character);\n    }\n    setEnd(line, character) {\n        this.end = new Position(line, character);\n    }\n}\nexport class Position {\n    constructor(line, character) {\n        this.lessThanOrEqualTo = (position) => this.line < position.line ||\n            (this.line === position.line && this.character <= position.character);\n        this.line = line;\n        this.character = character;\n    }\n    setLine(line) {\n        this.line = line;\n    }\n    setCharacter(character) {\n        this.character = character;\n    }\n}\nexport function offsetToPosition(text, loc) {\n    const EOL = '\\n';\n    const buf = text.slice(0, loc);\n    const lines = buf.split(EOL).length - 1;\n    const lastLineIndex = buf.lastIndexOf(EOL);\n    return new Position(lines, loc - lastLineIndex - 1);\n}\nexport function locToRange(text, loc) {\n    const start = offsetToPosition(text, loc.start);\n    const end = offsetToPosition(text, loc.end);\n    return new Range(start, end);\n}\n//# sourceMappingURL=Range.js.map","import { specifiedRules, validate, NoUnusedFragmentsRule, KnownFragmentNamesRule, Kind, ExecutableDefinitionsRule, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, } from 'graphql';\nconst specifiedSDLRules = [\n    LoneSchemaDefinitionRule,\n    UniqueOperationTypesRule,\n    UniqueTypeNamesRule,\n    UniqueEnumValueNamesRule,\n    UniqueFieldDefinitionNamesRule,\n    UniqueDirectiveNamesRule,\n    KnownTypeNamesRule,\n    KnownDirectivesRule,\n    UniqueDirectivesPerLocationRule,\n    PossibleTypeExtensionsRule,\n    UniqueArgumentNamesRule,\n    UniqueInputFieldNamesRule,\n];\nexport function validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n    const rules = specifiedRules.filter(rule => {\n        if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n            return false;\n        }\n        if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n            return false;\n        }\n        return true;\n    });\n    if (customRules) {\n        Array.prototype.push.apply(rules, customRules);\n    }\n    if (isSchemaDocument) {\n        Array.prototype.push.apply(rules, specifiedSDLRules);\n    }\n    const errors = validate(schema, ast, rules);\n    return errors.filter(error => {\n        if (error.message.includes('Unknown directive') && error.nodes) {\n            const node = error.nodes[0];\n            if (node && node.kind === Kind.DIRECTIVE) {\n                const name = node.name.value;\n                if (name === 'arguments' || name === 'argumentDefinitions') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    });\n}\n//# sourceMappingURL=validateWithCustomRules.js.map","import { GraphQLError, print, validate, NoDeprecatedCustomRule, parse, } from 'graphql';\nimport { CharacterStream, onlineParser } from '../parser';\nimport { Range, validateWithCustomRules, Position } from '../utils';\nexport const SEVERITY = {\n    Error: 'Error',\n    Warning: 'Warning',\n    Information: 'Information',\n    Hint: 'Hint',\n};\nexport const DIAGNOSTIC_SEVERITY = {\n    [SEVERITY.Error]: 1,\n    [SEVERITY.Warning]: 2,\n    [SEVERITY.Information]: 3,\n    [SEVERITY.Hint]: 4,\n};\nconst invariant = (condition, message) => {\n    if (!condition) {\n        throw new Error(message);\n    }\n};\nexport function getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n    var _a, _b;\n    let ast = null;\n    let fragments = '';\n    if (externalFragments) {\n        fragments =\n            typeof externalFragments === 'string'\n                ? externalFragments\n                : externalFragments.reduce((acc, node) => acc + print(node) + '\\n\\n', '');\n    }\n    const enhancedQuery = fragments ? `${query}\\n\\n${fragments}` : query;\n    try {\n        ast = parse(enhancedQuery);\n    }\n    catch (error) {\n        if (error instanceof GraphQLError) {\n            const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, enhancedQuery);\n            return [\n                {\n                    severity: DIAGNOSTIC_SEVERITY.Error,\n                    message: error.message,\n                    source: 'GraphQL: Syntax',\n                    range,\n                },\n            ];\n        }\n        throw error;\n    }\n    return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\nexport function validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n    if (!schema) {\n        return [];\n    }\n    const validationErrorAnnotations = validateWithCustomRules(schema, ast, customRules, isRelayCompatMode).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Error, 'Validation'));\n    const deprecationWarningAnnotations = validate(schema, ast, [\n        NoDeprecatedCustomRule,\n    ]).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Warning, 'Deprecation'));\n    return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\nfunction annotations(error, severity, type) {\n    if (!error.nodes) {\n        return [];\n    }\n    const highlightedNodes = [];\n    for (const [i, node] of error.nodes.entries()) {\n        const highlightNode = node.kind !== 'Variable' && 'name' in node && node.name !== undefined\n            ? node.name\n            : 'variable' in node && node.variable !== undefined\n                ? node.variable\n                : node;\n        if (highlightNode) {\n            invariant(error.locations, 'GraphQL validation error requires locations.');\n            const loc = error.locations[i];\n            const highlightLoc = getLocation(highlightNode);\n            const end = loc.column + (highlightLoc.end - highlightLoc.start);\n            highlightedNodes.push({\n                source: `GraphQL: ${type}`,\n                message: error.message,\n                severity,\n                range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end)),\n            });\n        }\n    }\n    return highlightedNodes;\n}\nexport function getRange(location, queryText) {\n    const parser = onlineParser();\n    const state = parser.startState();\n    const lines = queryText.split('\\n');\n    invariant(lines.length >= location.line, 'Query text must have more lines than where the error happened');\n    let stream = null;\n    for (let i = 0; i < location.line; i++) {\n        stream = new CharacterStream(lines[i]);\n        while (!stream.eol()) {\n            const style = parser.token(stream, state);\n            if (style === 'invalidchar') {\n                break;\n            }\n        }\n    }\n    invariant(stream, 'Expected Parser stream to be available.');\n    const line = location.line - 1;\n    const start = stream.getStartOfToken();\n    const end = stream.getCurrentPosition();\n    return new Range(new Position(line, start), new Position(line, end));\n}\nfunction getLocation(node) {\n    const typeCastedNode = node;\n    const location = typeCastedNode.loc;\n    invariant(location, 'Expected ASTNode to have a location.');\n    return location;\n}\n//# sourceMappingURL=getDiagnostics.js.map","import CodeMirror from 'codemirror';\nimport { getDiagnostics } from 'graphql-language-service';\nconst SEVERITY = ['error', 'warning', 'information', 'hint'];\nconst TYPE = {\n    'GraphQL: Validation': 'validation',\n    'GraphQL: Deprecation': 'deprecation',\n    'GraphQL: Syntax': 'syntax',\n};\nCodeMirror.registerHelper('lint', 'graphql', (text, options) => {\n    const { schema, validationRules, externalFragments } = options;\n    const rawResults = getDiagnostics(text, schema, validationRules, undefined, externalFragments);\n    const results = rawResults.map(error => ({\n        message: error.message,\n        severity: error.severity ? SEVERITY[error.severity - 1] : SEVERITY[0],\n        type: error.source ? TYPE[error.source] : undefined,\n        from: CodeMirror.Pos(error.range.start.line, error.range.start.character),\n        to: CodeMirror.Pos(error.range.end.line, error.range.end.character),\n    }));\n    return results;\n});\n//# sourceMappingURL=lint.js.map"],"names":["Range","constructor","start","end","this","containsPosition","position","line","character","setStart","Position","setEnd","__name","lessThanOrEqualTo","setLine","setCharacter","specifiedSDLRules","LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueDirectiveNamesRule","KnownTypeNamesRule","KnownDirectivesRule","UniqueDirectivesPerLocationRule","PossibleTypeExtensionsRule","UniqueArgumentNamesRule","UniqueInputFieldNamesRule","validateWithCustomRules","schema","ast","customRules","isRelayCompatMode","isSchemaDocument","rules","specifiedRules","filter","rule","NoUnusedFragmentsRule","ExecutableDefinitionsRule","KnownFragmentNamesRule","Array","prototype","push","apply","validate","error","message","includes","nodes","node","kind","Kind","DIRECTIVE","name","value","SEVERITY$1","DIAGNOSTIC_SEVERITY","invariant","condition","Error","getDiagnostics","query","arguments","length","undefined","externalFragments","_a","_b","fragments","reduce","acc","print","enhancedQuery","parse","GraphQLError","range","getRange","locations","column","severity","source","validateQuery","validationErrorAnnotations","flatMap","annotations","deprecationWarningAnnotations","NoDeprecatedCustomRule","Warning","concat","type","highlightedNodes","i","entries","highlightNode","variable","loc","highlightLoc","getLocation","location","queryText","parser","onlineParser","state","startState","lines","split","stream","CharacterStream","eol","token","getStartOfToken","getCurrentPosition","SEVERITY","TYPE","CodeMirror","registerHelper","text","options","validationRules","map","from","Pos","to"],"sourceRoot":""}